// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// c_objective
double c_objective(Eigen::Map<Eigen::MatrixXd> theta, Rcpp::List x, Rcpp::List masks, Eigen::MatrixXi inds, int k, Eigen::VectorXi p, Eigen::VectorXd lambda);
RcppExport SEXP _mmpca_c_objective(SEXP thetaSEXP, SEXP xSEXP, SEXP masksSEXP, SEXP indsSEXP, SEXP kSEXP, SEXP pSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type masks(masksSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(c_objective(theta, x, masks, inds, k, p, lambda));
    return rcpp_result_gen;
END_RCPP
}
// c_grad
Eigen::MatrixXd c_grad(Eigen::Map<Eigen::MatrixXd> theta, Rcpp::List x, Rcpp::List masks, Eigen::MatrixXi inds, int k, Eigen::VectorXi p, Eigen::VectorXd lambda, int num_threads);
RcppExport SEXP _mmpca_c_grad(SEXP thetaSEXP, SEXP xSEXP, SEXP masksSEXP, SEXP indsSEXP, SEXP kSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type masks(masksSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_grad(theta, x, masks, inds, k, p, lambda, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// c_Vxi
Eigen::MatrixXd c_Vxi(Eigen::Map<Eigen::MatrixXd> xi);
RcppExport SEXP _mmpca_c_Vxi(SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(c_Vxi(xi));
    return rcpp_result_gen;
END_RCPP
}
// c_optim_mmpca
Rcpp::List c_optim_mmpca(Eigen::Map<Eigen::MatrixXd> start, Rcpp::List x, Rcpp::List masks, Eigen::MatrixXi inds, int k, Eigen::VectorXi p, Eigen::VectorXd lambda, bool trace, int num_threads);
RcppExport SEXP _mmpca_c_optim_mmpca(SEXP startSEXP, SEXP xSEXP, SEXP masksSEXP, SEXP indsSEXP, SEXP kSEXP, SEXP pSEXP, SEXP lambdaSEXP, SEXP traceSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type masks(masksSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_optim_mmpca(start, x, masks, inds, k, p, lambda, trace, num_threads));
    return rcpp_result_gen;
END_RCPP
}
// c_invVinner
Eigen::MatrixXd c_invVinner(Eigen::Map<Eigen::MatrixXd> t);
RcppExport SEXP _mmpca_c_invVinner(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(c_invVinner(t));
    return rcpp_result_gen;
END_RCPP
}
// c_init_parallel
void c_init_parallel();
RcppExport SEXP _mmpca_c_init_parallel() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    c_init_parallel();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mmpca_c_objective", (DL_FUNC) &_mmpca_c_objective, 7},
    {"_mmpca_c_grad", (DL_FUNC) &_mmpca_c_grad, 8},
    {"_mmpca_c_Vxi", (DL_FUNC) &_mmpca_c_Vxi, 1},
    {"_mmpca_c_optim_mmpca", (DL_FUNC) &_mmpca_c_optim_mmpca, 9},
    {"_mmpca_c_invVinner", (DL_FUNC) &_mmpca_c_invVinner, 1},
    {"_mmpca_c_init_parallel", (DL_FUNC) &_mmpca_c_init_parallel, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_mmpca(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
